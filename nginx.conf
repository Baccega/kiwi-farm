events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Define the limit_req_zone in the http context
    limit_req_zone $binary_remote_addr zone=mylimit:10m rate=30r/s;
    # Limits to 10 simultaneous connections per IP, preventing abuse from connection-heavy clients.
    limit_conn_zone $binary_remote_addr zone=connlimit:10m;

    server {
        listen 80;
        server_name legiumelle.it www.legiumelle.it;

        # Redirect all HTTP requests to HTTPS
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl http2;
        # use the certificates
        ssl_certificate     /etc/letsencrypt/live/legiumelle.it/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/legiumelle.it/privkey.pem;
        server_name legiumelle.it www.legiumelle.it;

        location ~ /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # Enable rate limiting
        limit_req zone=mylimit burst=50 nodelay;

        location / {
            proxy_pass http://host.docker.internal:3000/;
            proxy_set_header x-forwarded-host "legiumelle.it";
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;

            # Disable buffering for streaming support
            proxy_buffering off;
            proxy_set_header X-Accel-Buffering no;
        }

        location /images/ {
            root /var/www;
            try_files $uri $uri/ =404;

            # Ensure Nginx sets the correct MIME type for images
            types {
                image/jpeg  jpg;
                image/png   png;
                image/gif   gif;
                image/webp  webp;
                image/svg+xml svg;
            }
        }
    }

    # Close connections for unknown domains
    server {
        listen 80 default_server;
        http2 on;
        server_name _;
        return 444;  
    }

    server {
        listen 443 ssl default_server;
        http2 on;
        server_name _;
        ssl_reject_handshake on;
    }
}